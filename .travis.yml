language: c
env:
  global:
  - CMOCKA_VERSION: 1.1.5

cache:
  directories:
  - cmocka

matrix:
  include:
    - arch: amd64
      os: linux
      dist: bionic
      sudo: required
      compiler: clang
      env: TRAVIS_ARCH="amd64"
    - arch: amd64
      os: linux
      dist: bionic
      sudo: required
      compiler: gcc
      env: TRAVIS_ARCH="amd64" DEPLOY_BUILD=TRUE
    - arch: arm64
      os: linux
      dist: bionic
      sudo: required
      compiler: gcc
      env: TRAVIS_ARCH="arm64"
    - arch: amd64
      os: linux
      dist: bionic
      sudo: required
      compiler: gcc
      env: TRAVIS_ARCH="amd64" ENABLE_STATIC=ON
    - arch: amd64
      os: osx
      compiler: gcc
      env: TRAVIS_ARCH="amd64"
  allow_failures:
    - os: osx

branches:
  only:
    - master
    - devel

addons:
  apt:
    packages:
    - abi-dumper
    - abi-compliance-checker
    - pkg-config
    - w3m
    - curl
    - valgrind
    - libpcre3-dev
    - python3-dev
    - python3-cffi
    - python3-setuptools
    - python3-pip
    - swig
    update: true
  homebrew:
    packages:
    - curl
    update: true

before_install:
  - OLD_CMOCKA_VERSION=$(sed -n 's/project(cmocka VERSION \([0-9.]*\) LANGUAGES C)/\1/p' cmocka/CMakeLists.txt)
  - if [ -f "cmocka/CMakeLists.txt" ] && [ "$OLD_CMOCKA_VERSION" != "$CMOCKA_VERSION" ]; then echo "Purging the cmocka-$OLD_CMOCKA_VERSION from cache"; rm -rf cmocka; fi
  - if [ ! -d "cmocka" ] || [ ! -f "cmocka/CMakeLists.txt" ]; then echo "Downloading cmocka-$CMOCKA_VERSION"; rm -rf cmocka && curl -SLO https://cmocka.org/files/1.1/cmocka-$CMOCKA_VERSION.tar.xz && tar -xJf cmocka-$CMOCKA_VERSION.tar.xz && mv "cmocka-$CMOCKA_VERSION" cmocka; fi
  - if [ ! -d "cmocka/build" ] || [ ! -f "cmocka/build/Makefile" ]; then mkdir -p cmocka/build && (cd cmocka/build && cmake ..); fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ] && [ ! -f "cmocka/build/src/libcmocka.dylib" ]; then (cd cmocka/build && make -j2); fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ] && [ ! -f "cmocka/build/src/libcmocka.so" ]; then (cd cmocka/build && make -j2); fi
  - if [ "$DEPLOY_BUILD" = "TRUE" ]; then sudo snap install universal-ctags; fi
  - if [ "$DEPLOY_BUILD" = "TRUE" ]; then pip3 install --user codecov==2.0.22; export CFLAGS="-coverage"; fi

script:
  - mkdir build && cd build
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then cmake -DENABLE_VALGRIND_TESTS=OFF ..; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ] && [ "$TRAVIS_ARCH" = "amd64" ]; then cmake -DGEN_LANGUAGE_BINDINGS=ON -DENABLE_STATIC=${ENABLE_STATIC:-OFF} ..; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ] && [ "$TRAVIS_ARCH" = "arm64" ]; then cmake -DGEN_LANGUAGE_BINDINGS=ON -DENABLE_VALGRIND_TESTS=OFF ..; fi
  - make -j2 && ctest --output-on-failure
  - cd -
  - if [ "$DEPLOY_BUILD" = "TRUE" ]; then ./tools/abi-check.sh; fi

deploy:
  - provider: script
    script: bash <(curl -s https://codecov.io/bash)
    skip_cleanup: true
    verbose: true
    on:
      branch: master
      condition: $DEPLOY_BUILD = TRUE
  - provider: script
    script: ./packages/create-package.sh
    skip_cleanup: true
    verbose: true
    on:
      branch: master
      condition: $DEPLOY_BUILD = TRUE
