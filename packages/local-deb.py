#!/usr/bin/python3

import sys
import os
import re
import subprocess
import argparse

parser = argparse.ArgumentParser(prog="libyang Debian package preparation script")
parser.add_argument('--no-swig', dest='noswig', action='store_const', const=True, help="disable SWIG dependency for older systems")
parser.add_argument('--dh-compat', dest='dhver', type=int, help="override debhelper compat level")
parser.add_argument('--deb-suffix', dest='debsuffix', type=str, help="debian version suffix")
args = parser.parse_args()

os.environ['TZ'] = 'UTC'

basedir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
os.chdir(basedir)

if not os.path.exists('.git'):
    sys.stderr.write('this script can only be executed on a git checkout.\n')
    sys.exit(1)
if os.path.exists('debian'):
    sys.stderr.write('there already is a debian directory. please remove it.\n')
    sys.exit(1)

suffix_re = re.compile('^[a-zA-Z0-9\.+~]*$')
debsuffix = args.debsuffix or ''
if suffix_re.match(debsuffix) is None:
    sys.stderr.write('invalid debian suffix "%s"\n' % (debsuffix,))
    sys.exit(1)

# grab set of cmake variables

gitblame = subprocess.Popen(['git', 'blame', '-p', 'CMakeLists.txt'], stdout=subprocess.PIPE)
gitblameout, _ = gitblame.communicate()
gitblame.wait()

commit_re = re.compile(r'^([0-9a-f]+) \d+ \d+($| )')
srcline_re = re.compile(r'^\t\s*set\s*\(\s*(?P<name>[^\s]+)\s+(?P<value>[^)]*)\)')
commit = None
cmakevars = {}

for line in gitblameout.decode('UTF-8').splitlines():
    m = commit_re.match(line)
    if m is not None:
        commit = m.group(1)
        continue
    m = srcline_re.match(line)
    if m is not None:
        cmakevars[m.group('name')] = (commit, m.group('value'))

# find version number and commit it was last changed in

version = cmakevars['LIBYANG_VERSION'][1]
commits = set([cmakevars['LIBYANG_VERSION'][0]])

var_re = re.compile(r'\$\{([^}]+)\}')
def resolve_var(match):
    varname = match.group(1).strip()
    commits.add(cmakevars[varname][0])
    return cmakevars[varname][1]

prev_version = None
while prev_version != version:
    prev_version = version
    version = var_re.sub(resolve_var, version)

# go to latest commit of any commit that touched the version number

def merge_base(commits):
    return subprocess.check_output(['git', 'merge-base'] + list(commits)).decode('UTF-8').strip()

while len(commits) > 1:
    mb = merge_base(commits)
    if mb not in commits:
        sys.stderr.write('found divergent git history while checking version number\n')
        commit = mb
        break
    commits.remove(mb)
else:
    commit = list(commits)[0]

# establish a pseudo-tag

revs = subprocess.check_output(['git', 'rev-list', commit + '..']).decode('UTF-8').splitlines()
head = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).decode('UTF-8').strip()
gitts = subprocess.check_output(['git', 'show', '-s', '--format=%cD', '--date=local', head]).decode('UTF-8').strip()

debver = '%s-%03d-g%s' % (version, len(revs), head)

sys.stderr.write('using debian version number %s-0%s\n' % (debver, debsuffix))

# plop in debian/ directory

with open('packages/debcommit', 'r') as fd:
    debcommit = fd.read().strip()
subprocess.check_call(['git', 'checkout', debcommit, '--', 'debian/'])
subprocess.check_call(['git', 'reset', 'debian/'])
os.unlink('debian/changelog')

with open('debian/changelog', 'w') as fd:
    fd.write('''libyang (%s-0%s) unstable; urgency=medium

  * autogenerated local build

 -- autobuild <autobuild@email.invalid>  %s
''' % (debver, debsuffix, gitts))

if args.noswig:
    subprocess.check_call(['patch', '-p1', '-i', 'packages/debian-no-swig.patch'])
if args.dhver:
    with open('debian/compat', 'w') as fd:
        fd.write('%d\n' % (args.dhver,))

subprocess.check_call(['git', 'archive', '--prefix=libyang-%s/' % (debver,), '-o', '../libyang_%s.orig.tar.gz' % (debver,), head])
subprocess.check_call(['dpkg-source', '-b', '.'])

sys.stderr.write('all done.  you may run dpkg-buildpackage now.\n')
