source [expr {[info exists ::env(TESTS_DIR)] ? "$env(TESTS_DIR)/non-interactive/ly.tcl" : "ly.tcl"}]

set mdir "$::env(YANG_MODULES_DIR)"
set ddir "$::env(TESTS_DIR)/data"

test data_type_data {data --type data} {
    ly_cmd "-t data $mdir/modconfig.yang $ddir/modconfig.xml"
} {}

test data_type_config {data --type config} {
    ly_cmd_err "-t config $mdir/modconfig.yang $ddir/modconfig.xml" "Unexpected data state node \"lff\""
    ly_cmd "-t config $mdir/modconfig.yang $ddir/modconfig2.xml"
} {}

test data_type_get {data --type get} {
    ly_cmd_err "-t data $mdir/modleafref.yang $ddir/modleafref2.xml" "Invalid leafref value"
    ly_cmd "-t get $mdir/modleafref.yang $ddir/modleafref2.xml"
} {}

test data_type_getconfig_no_state {No state node for data --type getconfig} {
    ly_cmd_err "-t getconfig $mdir/modconfig.yang $ddir/modconfig.xml" "Unexpected data state node \"lff\""
    ly_cmd "-t getconfig $mdir/modconfig.yang $ddir/modconfig2.xml"
} {}

test data_type_getconfig_parse_only {No validation performed for data --type getconfig} {
    ly_cmd_err "-t data $mdir/modleafref.yang $ddir/modleafref2.xml" "Invalid leafref value"
    ly_cmd "-t getconfig $mdir/modleafref.yang $ddir/modleafref2.xml"
} {}

test data_type_edit_parse_only {No validation performed for data --type edit} {
    ly_cmd_err "-t data $mdir/modleafref.yang $ddir/modleafref2.xml" "Invalid leafref value"
    ly_cmd "-t edit $mdir/modleafref.yang $ddir/modleafref2.xml"
} {}

cleanupTests
